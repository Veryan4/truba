{{ range .Values.environments }}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: ml-restart
  namespace: {{ . }}
spec:
  successfulJobsHistoryLimit: 0
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  schedule: {{ $.Values.schedules.mlRestart }}
  jobTemplate:
    spec:
      backoffLimit: 1
      activeDeadlineSeconds: 600 # timeout, makes most sense with
        # "waiting for rollout" variant specified below
      template:
        spec:
          serviceAccountName:
            ml-restart # name of the service
          restartPolicy: Never
          containers:
            - name: kubectl
              imagePullPolicy: Always
              image:
                bitnami/kubectl # probably any kubectl image will do,
                # optionaly specify version, but this
                # should not be necessary, as long the
                # version of kubectl is new enough to
                # have `rollout restart`
              command:
                - "kubectl"
                - "rollout"
                - "restart"
                - "deployment/ml"
                - "-n"
                - "{{ . }}"
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: training
  namespace: {{ . }}
spec:
  schedule: {{ $.Values.schedules.training }}
  successfulJobsHistoryLimit: 0
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 1
      template:
        spec:
          imagePullSecrets:
            - name: docker-registry
          containers:
            - name: training
              image: "{{ $.Values.registry }}/ml:{{ . }}"
              imagePullPolicy: Always
              env:
                - name: SERVICE_NAME
                  value: training
                - name: ENVIRONMENT
                  value: {{ . }}
                - name: CORE_DB_HOSTNAME
                  valueFrom:
                    configMapKeyRef:
                      key: CORE_DB_HOSTNAME
                      name: configs
                - name: CORE_DB_PORT
                  valueFrom:
                    configMapKeyRef:
                      key: CORE_DB_PORT
                      name: configs
                - name: MONGO_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: dark-secrets
                      key: MONGO_USERNAME
                - name: MONGO_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: dark-secrets
                      key: MONGO_PASSWORD
                - name: ML_URL
                  valueFrom:
                    configMapKeyRef:
                      key: ML_URL
                      name: configs
                - name: CORE_URL
                  valueFrom:
                    configMapKeyRef:
                      key: CORE_URL
                      name: configs
                - name: OTEL_EXPORTER_OTLP_INSECURE
                  value: "true"
                - name: OTEL_EXPORTER_OTLP_ENDPOINT
                  value: "http://alloy.grafana.svc.cluster.local:4317"
                - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
                  value: "http://alloy.grafana.svc.cluster.local:4317"
                - name: OTEL_EXPORTER_OTLP_PROTOCOL
                  value: "grpc"
              args:
                - python
                - training.py
              ports:
                - containerPort: 7077
              volumeMounts:
                - mountPath: "/{{ $.Values.services.ml.volume.name }}/"
                  name: {{ . }}{{ $.Values.services.ml.volume.name }}
              resources: {}
          restartPolicy: Never
          volumes:
            - name: {{ . }}{{ $.Values.services.ml.volume.name }}
              persistentVolumeClaim:
                claimName: {{ . }}{{ $.Values.services.ml.volume.name }}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: push
  namespace: {{ . }}
spec:
  schedule: {{ $.Values.schedules.push }}
  successfulJobsHistoryLimit: 0
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 1
      template:
        spec:
          imagePullSecrets:
            - name: docker-registry
          containers:
            - name: push
              image: "{{ $.Values.registry }}/core:{{ . }}"
              imagePullPolicy: Always
              env:
                - name: SERVICE_NAME
                  value: push
                - name: ENVIRONMENT
                  value: {{ . }}
                - name: CORE_DB_HOSTNAME
                  valueFrom:
                    configMapKeyRef:
                      key: CORE_DB_HOSTNAME
                      name: configs
                - name: CORE_DB_PORT
                  valueFrom:
                    configMapKeyRef:
                      key: CORE_DB_PORT
                      name: configs
                - name: MONGO_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: dark-secrets
                      key: MONGO_USERNAME
                - name: MONGO_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: dark-secrets
                      key: MONGO_PASSWORD
                - name: PRIVATE_VAPID
                  valueFrom:
                    secretKeyRef:
                      name: dark-secrets
                      key: PRIVATE_VAPID
                - name: PUBLIC_VAPID
                  valueFrom:
                    configMapKeyRef:
                      key: PUBLIC_VAPID
                      name: configs
                - name: APP_URL
                  valueFrom:
                    configMapKeyRef:
                      key: APP_URL
                      name: configs
                - name: MAIL_SENDER_NAME
                  valueFrom:
                    configMapKeyRef:
                      key: MAIL_SENDER_NAME
                      name: configs
                - name: MAIL_ADDRESS
                  valueFrom:
                    configMapKeyRef:
                      key: MAIL_ADDRESS
                      name: configs
                - name: MAIL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: dark-secrets
                      key: MAIL_PASSWORD
                - name: OTEL_EXPORTER_OTLP_INSECURE
                  value: "true"
                - name: OTEL_EXPORTER_OTLP_ENDPOINT
                  value: "http://alloy.grafana.svc.cluster.local:4317"
                - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
                  value: "http://alloy.grafana.svc.cluster.local:4317"
                - name: OTEL_EXPORTER_OTLP_PROTOCOL
                  value: "grpc"
              args:
                - /app/push
              ports:
                - containerPort: 7073
          restartPolicy: Never
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: scraper
  namespace: {{ . }}
spec:
  schedule: {{ $.Values.schedules.scraper.en }}
  successfulJobsHistoryLimit: 0
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 1
      template:
        spec:
          imagePullSecrets:
            - name: docker-registry
          containers:
            - name: scraper
              image: "{{ $.Values.registry }}/scraper:{{ . }}"
              imagePullPolicy: Always
              env:
                - name: SERVICE_NAME
                  value: scraper
                - name: ENVIRONMENT
                  value: {{ . }}
                - name: CORE_URL
                  valueFrom:
                    configMapKeyRef:
                      key: CORE_URL
                      name: configs
                - name: OTEL_EXPORTER_OTLP_INSECURE
                  value: "true"
                - name: OTEL_EXPORTER_OTLP_ENDPOINT
                  value: "http://alloy.grafana.svc.cluster.local:4317"
                - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
                  value: "http://alloy.grafana.svc.cluster.local:4317"
                - name: OTEL_EXPORTER_OTLP_PROTOCOL
                  value: "grpc"
                - name: SCRAPER_LANGUAGE
                  value: en
              args:
                - python
                - main.py
              ports:
                - containerPort: 5057
          restartPolicy: Never
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: scraper-fr
  namespace: {{ . }}
spec:
  schedule: {{ $.Values.schedules.scraper.fr }}
  successfulJobsHistoryLimit: 0
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 1
      template:
        spec:
          imagePullSecrets:
            - name: docker-registry
          containers:
            - name: scraper-fr
              image: "{{ $.Values.registry }}/scraper:{{ . }}"
              imagePullPolicy: Always
              env:
                - name: SERVICE_NAME
                  value: scraper_fr
                - name: ENVIRONMENT
                  value: {{ . }}
                - name: CORE_URL
                  valueFrom:
                    configMapKeyRef:
                      key: CORE_URL
                      name: configs
                - name: OTEL_EXPORTER_OTLP_INSECURE
                  value: "true"
                - name: OTEL_EXPORTER_OTLP_ENDPOINT
                  value: "http://alloy.grafana.svc.cluster.local:4317"
                - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
                  value: "http://alloy.grafana.svc.cluster.local:4317"
                - name: OTEL_EXPORTER_OTLP_PROTOCOL
                  value: "grpc"
                - name: SCRAPER_LANGUAGE
                  value: fr
              args:
                - python
                - main.py
              ports:
                - containerPort: 5057
          restartPolicy: Never
---
{{ end }}
